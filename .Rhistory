library(tidyverse)
library(ape)
library(phylter)
library(TreeTools)
# load gene trees
locus.trees <- read.tree('Data/genetrees.nwk')
# load gene names
names <- readLines("Data/list.txt")
### Drop outgroups
locus.trees <- drop.tip.multiPhylo(locus.trees, c("homSap", "galGal", "allMis"))
tips <- AllTipLabels(locus.trees)
# filter based on at least 9 tips (50 % of taxa present)
names <- names[Ntip(locus.trees) >= 9]
locus.trees <- locus.trees[Ntip(locus.trees) >= 9]
# RUNNN phylteR to get outliers
results <- phylter(locus.trees, gene.names = names)
# get matrix for each gene that contains pairwise distances between species
matrices <- results$Initial$mat.data
# Required Libraries
library(MASS)  # For Mahalanobis distance
library(stats) # For Chi-squared distribution
# Generate all combinations of two turtles
combinations <- combn(tips, 2, simplify = FALSE)
# Merge the names alphabetically with an underscore
combinations_vect <- sapply(combinations, function(x) paste(sort(x), collapse = "_"))
lapply(matrices,dim)
matrices_imputed_phylter <- impMean(matrices)
lapply(matrices_imputed_phylter,dim)
source("Scripts/impMean_matrixaverage.R")
matrices_imputed_meanmatrix <- impMean_matrices(matrices)
lapply(matrices_imputed_phylter,dim)
matrices_imputed_meanmatrix <- impMean_matrices(matrices)
matrices_imputed_meangene <- impMean_matrices(matrices)
lapply(matrices_imputed_phylter,dim)
# impute from phylter
matrices_imputed_meanlist <- impMean(matrices)
lapply(matrices_imputed_phylter,dim)
table(lapply(matrices_imputed_phylter,dim))
table(lapply(matrices_imputed_phylter,dim)[,2])
lapply(matrices_imputed_phylter,dim)[,2]
table(lapply(matrices_imputed_phylter,dim)[[2]])
table(lapply(matrices_imputed_phylter,dim)[[1]])
table(lapply(matrices_imputed_phylter,dim)[[1]])
# make combined dataframe
source("Scripts/stitchMatricesToDataFrame.R")
comb_imputeded_meangene <- stitchMatricesToDataFrame(matrices_imputed_meangene)
comb_imputed_meangene <- stitchMatricesToDataFrame(matrices_imputed_meangene)
comb_imputed_meanlist <- stitchMatricesToDataFrame(matrices_imputed_meanlist)
comb_imputed_meangene <- stitchMatricesToDataFrame(matrices_imputed_meangene)
comb_imputed_meanlist <- stitchMatricesToDataFrame(matrices_imputed_meanlist)
stitchMatricesToDataFrame <- function(matrices) {
# Helper function to flatten the upper triangle of a matrix
flattenUpperTriangle <- function(matrix) {
if (!is.matrix(matrix) || nrow(matrix) != ncol(matrix)) {
stop("All elements in the list must be square matrices.")
}
upper_tri_indices <- upper.tri(matrix, diag = FALSE)
return(matrix[upper_tri_indices])
}
# Iterate over the list of matrices
flattened_rows <- lapply(seq_along(matrices), function(i) {
flattened_row <- flattenUpperTriangle(matrices[[i]]) # Flatten the matrix
names(flattened_row) <- NULL # Remove column names for consistency
return(flattened_row)       # Return as a numeric vector
})
# Combine flattened rows into a data frame
stitched_df <- do.call(rbind, flattened_rows)
# Add gene names as row names
gene_name <- names(matrices)
rownames(stitched_df) <- gene_names
# Return the final data frame
return(as.data.frame(stitched_df))
}
# make combined dataframe
source("Scripts/stitchMatricesToDataFrame.R")
comb_imputed_meangene <- stitchMatricesToDataFrame(matrices_imputed_meangene)
comb_imputed_meanlist <- stitchMatricesToDataFrame(matrices_imputed_meanlist)
# make combined dataframe
source("Scripts/stitchMatricesToDataFrame.R")
comb_imputed_meangene <- stitchMatricesToDataFrame(matrices_imputed_meangene)
comb_imputed_meangene <- stitchMatricesToDataFrame(matrices_imputed_meangene)
comb_imputed_meanlist <- stitchMatricesToDataFrame(matrices_imputed_meanlist)
# make combined dataframe
source("Scripts/stitchMatricesToDataFrame.R")
comb_imputed_meangene <- stitchMatricesToDataFrame(matrices_imputed_meangene)
comb_imputed_meanlist <- stitchMatricesToDataFrame(matrices_imputed_meanlist)
comb_imputed_meangene
comb_imputed_meangene
comb_imputed_meanlist
#detect outliers
source('Scripts/detectOutliers.R')
# Main script to apply these functions over two dataframes and confidence intervals
process_dataframes <- function(df1 = comb_imputed_meangene, df2 = comb_imputed_meanlist, conf_intervals = c(0.90, 0.95, 0.99)) {
# Compute Mahalanobis distances for both dataframes
distances1 <- distances_extraction(df1)
distances2 <- distances_extraction(df2)
results <- list()
for (conf in conf_intervals) {
# Detect outliers based on quantiles
quantile_outliers1 <- detect_outliers_and_extract_quantiles(as.data.frame(df1), distances1, conf)
quantile_outliers2 <- detect_outliers_and_extract_quantiles(as.data.frame(df2), distances2, conf)
# Detect outliers based on Chi-squared threshold
chisq_outliers1 <- detect_outliers_and_extract_chisq(as.data.frame(df1), distances1, conf, df1)
chisq_outliers2 <- detect_outliers_and_extract_chisq(as.data.frame(df2), distances2, conf, df2)
# Combine results for the current confidence level
results[[paste0("Confidence_", conf)]] <- list(
df1 = list(
quantile_outliers = quantile_outliers1,
chisq_outliers = chisq_outliers1
),
df2 = list(
quantile_outliers = quantile_outliers2,
chisq_outliers = chisq_outliers2
)
)
}
return(results)
}
View(results)
View(results)
write_all_outliers <- function(outlier_results, methods = c("chisq", "quantile"), conf_levels = c(0.90, 0.95, 0.99), output_dir = "Results") {
# Ensure the output directory exists
if (!dir.exists(output_dir)) {
dir.create(output_dir, recursive = TRUE)
}
# Iterate over confidence levels
for (conf in conf_levels) {
# Iterate over methods (e.g., "chisq", "quantile")
for (method in methods) {
# Construct the key for the confidence level
conf_key <- paste0("Confidence_", conf)
# Check if the method exists in the results for the current confidence level
if (!is.null(outlier_results[[conf_key]][[method]])) {
# Extract outlier indices
indices <- outlier_results[[conf_key]][[method]]$indices
# Construct the filename
filename <- paste0(output_dir, "/outliergene_", method, conf * 100, ".csv")
# Write the indices to a CSV file
write.csv(data.frame(Outlier = indices), filename, row.names = FALSE)
# Print confirmation
message("Written: ", filename)
} else {
# Print warning if no results for the method and confidence level
warning("No results for ", method, " at confidence ", conf)
}
}
}
}
write_all_outliers(results)
results <- process_dataframes(comb_imputed_meangene,comb_imputed_meanlist)
distances <- distances_extraction(comb_imputed_meangene)
distances_meangene <- distances_extraction(comb_imputed_meangene)
outliergene_chi95_meangene <- detect_outliers_and_extract_quantiles(matrices_imputed_meangene,
distances = distances_meangene,
quantile_threshold = 0.95)
outliergene_chi95_meangene
x <- detect_outliers_and_extract_quantiles(matrices_imputed_meangene,
distances = distances_meangene,
quantile_threshold = 0.95)
outliergene_chi95_meangene <- detect_outliers_and_extract_quantiles(matrices_imputed_meangene,
distances = distances_meangene,
quantile_threshold = 0.95)
outliergene_chi95_meangene
View(outliergene_chi95_meangene)
View(comb_imputed_meangene)
View(matrices_imputed_meangene)
matrices_imputed_meangene[["100073at32523"]]
outliergene_chi95_meangene
t <- as.data.frame(t(outliergene_chi95_meangene))
t
View(t)
t
t
View(t)
# Generate all combinations of two turtles
combinations <- combn(tips, 2, simplify = FALSE)
# Merge the names alphabetically with an underscore
combinations_vect <- sapply(combinations, function(x) paste(sort(x), collapse = "_"))
# empty dataframe
df <- as.data.frame(matrix(NA, nrow = length(matrices), ncol = length(combinations_vect)))
colnames(df) <- combinations_vect
rownames(df) <- names(matrices)
#impute from average across matrix
source("Scripts/impMean_matrixaverage.R")
matrices_imputed_meangene <- impMean_matrices(matrices)
table(lapply(matrices_imputed_phylter,dim)[[1]])
# impute from phylter
matrices_imputed_meanlist <- impMean(matrices)
table(lapply(matrices_imputed_phylter,dim)[[1]])
# make combined dataframe
source("Scripts/stitchMatricesToDataFrame.R")
comb_imputed_meangene <- stitchMatricesToDataFrame(matrices_imputed_meangene)
comb_imputed_meanlist <- stitchMatricesToDataFrame(matrices_imputed_meanlist)
#detect outliers
source('Scripts/detectOutliers.R')
distances_meangene <- distances_extraction(comb_imputed_meangene)
outliergene_chi95_meangene <- detect_outliers_and_extract_quantiles(matrices_imputed_meangene,
distances = distances_meangene,
quantile_threshold = 0.95)
outliergene_chi95_meangene
comb_imputed_meangene
outliergene_chi95_meangene
# get outlier species - v2 ------------------------------------------------
flatten(out)
