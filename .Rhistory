column_gap = unit(3, "mm"),
# column_order = column_orders,
column_split = factor(c(rep("Alpine",26),
rep("Scandinavia",30)),
levels = c("Alpine","Scandinavia")),
row_title = NULL,
column_names_rot = 80,
row_names_gp = gpar(fontface = "italic",
col = c(rep("red",3),
rep("orange",13),
rep("yellow",5),
rep("purple",1),
rep("blue",2),
rep("green",5),
rep("grey",6),
rep("black",7))),
row_labels = row_labels[rownames(t(as.matrix(df_wide)))])
draw(birch_heatmap1)
pdf("/Users/hsf378/Downloads/birchtar_heatmap_microbe.pdf", width = 20, height = 10)
draw(birch_heatmap1)
dev.off()
library(lvplot)
library(showtext)
install.packages("showtext")
install.packages("DescTools")
library(readxl)
library(readr)
library(lvplot)
library(showtext)
library(tidyverse)
library(DescTools)
source("/Users/hsf378/Downloads/perk.R")
source("/Users/hsf378/Downloads/damage_est_function.R")
source("/Users/hsf378/Downloads/perk_wrapper.R")
source("/Users/hsf378/Downloads/perk_wrapper_function.R")
source("/Users/hsf378/Downloads/get_dmg_decay_fit.R")
source("/Users/hsf378/Downloads/get_calculate_plot_grid.R")
holi_data <- read_tsv("/Users/hsf378/Downloads/course_data.tsv")
unique(holi_data$label)
holi_data
holi_data
metadata <- read_delim("/Users/hsf378/Downloads/metadata.tsv", delim = "\t",
escape_double = FALSE, trim_ws = TRUE)
unique(metadata$label)
unique(metadata$label)
metadata
metadata <- read_tsv("/Users/hsf378/Downloads/metadata.tsv")
unique(metadata$label)
metadata
metadata <- read_tsv("/Users/hsf378/Downloads/metadata.tsv")
unique(metadata$label)
metadata
holi_data <- read_tsv("/Users/hsf378/Downloads/course_data.tsv")
unique(holi_data$label)
holi_data_sp_euk_100 <- metadata |>
inner_join(holi_data) |>
filter(rank == "family") |>
filter(grepl("Eukaryota", taxa_path)) |>
filter(nreads >= 100) |>
rename(tax_name = taxid, n_reads = nreads)
holi_data_sp_euk_100 |>
select(sample_name, years_bp, n_reads, nalign, A_b, Zfit)
holi_data_sp_euk_50 <- holi_data |>
filter(rank == "genus") |>
filter(grepl("Eukaryota", taxa_path)) |>
filter(nreads < 100 & nreads >= 50) |>
rename(tax_name = taxid, n_reads = nreads)
# Let's get the damage fits using CCC
samples <- holi_data$label |> unique()
dat100 <- dmg_fwd_CCC(holi_data_sp_euk_100, samples, ci = "asymptotic", nperm = 100, nproc = 4)
dat50 <- dmg_fwd_CCC(holi_data_sp_euk_50, samples, ci = "asymptotic", nperm = 100, nproc = 4)
# Get good fits for the 100 reads
dat100_filt <- dat100 |>
ungroup() |>
inner_join(holi_data_sp_euk_100) |>
mutate(fit = ifelse(rho_c >= 0.85 & C_b > 0.9 & round(rho_c_perm_pval, 3) < 0.1 & !is.na(rho_c), "good", "bad")) |>
mutate(fit = ifelse(q_CI_h >= 1 | c_CI_l <= 0, "bad", fit))
colnames(dat100_filt)
# Plot how many good/bad genus we have per sample
pdf("proportion_good_bad_genus_100readsplus.pdf", width = 24, height = 8)
dat100_filt |>
group_by(label, fit) |>
count() |>
ungroup() |>
inner_join(metadata) |>
#inner_join(cdata) |>
#mutate(
#internal_name_by_dom = fct_reorder(label, -age),
#label_fig = fct_reorder(label_fig, -age)
#) |>
ggplot(aes(sample_name, n, fill = fit)) +
geom_col() +
theme_bw() +
theme(
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
legend.position = "top",
legend.title = element_blank(),
text = element_text(size = 16),
) +
ylab("Number of genus") +
xlab("Sample") +
guides(fill = guide_legend(nrow = 1))
#facet_grid(~specific_feature, scales = "free_x", space = "free")
dev.off()
dat50_filt <- dat50 |>
ungroup() |>
inner_join(holi_data_sp_euk_50) |>
mutate(fit = ifelse(rho_c >= 0.85 & C_b > 0.9 & round(rho_c_perm_pval, 3) < 0.1 & !is.na(rho_c), "good", "bad")) |>
mutate(fit = ifelse(q_CI_h >= 1 | c_CI_l <= 0, "bad", fit))
# Plot how many good/bad genus we have per sample
pdf("proportion_good_bad_genus_less100reads.pdf", width = 24, height = 8)
dat50_filt |>
group_by(label, fit) |>
count() |>
ungroup() |>
inner_join(metadata) |>
# mutate(
#   internal_name_by_dom = fct_reorder(internal_name_by_dom, -age),
#   label_fig = fct_reorder(label_fig, -age)
# ) |>
ggplot(aes(sample_name, n, fill = fit)) +
geom_col() +
theme_bw() +
theme(
axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5),
legend.position = "top",
legend.title = element_blank(),
text = element_text(size = 16),
) +
ylab("Number of genus") +
xlab("Sample") +
guides(fill = guide_legend(nrow = 1))
dev.off()
# Let's plots some random Eukaryotes taxa for good and bad fits
# 100 reads, good fit
tax <- dat100_filt |>
inner_join(metadata) |>
ungroup() |>
filter(fit == "good", grepl("Euka", taxa_path)) |>
group_by(label) |>
slice_sample(n = 100) |>
ungroup()
samples <- tax$label |> unique()
plots100_good <- purrr::map(.x = samples, dat = tax, .f = function(x, dat, orient = "fwd", pos = 25, p_breaks = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6)) {
data <- dat |> filter(label == x)
grid_size <- calculate_plot_grid(length(data$tax_name))
l <- lapply(data$name, function(X) {
df1 <- data |>
filter(name == X)
p <- get_dmg_decay_fit(df1, orient = orient, pos = pos, p_breaks = p_breaks)
p <- p + ggtitle(X, paste("n_reads = ", df1$n_reads))
return(p)
})
plot <- ggpubr::ggarrange(plotlist = l, ncol = grid_size$cols, nrow = grid_size$rows, align = "hv")
tit <- paste0("Sample: ", x)
ggpubr::annotate_figure(plot, top = ggpubr::text_grob(tit,
color = "black", face = "bold", size = 12
))
}, .progress = TRUE)
names(plots100_good) <- samples
pdf("plots100good_euks.pdf", width = 20, height = 20)
print(plots100_good)
dev.off()
# 50 reads, good fit
tax <- dat50_filt |>
ungroup() |>
inner_join(metadata) |>
filter(fit == "good") |>
group_by(label) |>
slice_sample(n = 100) |>
ungroup()
samples <- tax$label |> unique()
plots50_good <- purrr::map(.x = samples, dat = tax, .f = function(x, dat, orient = "fwd", pos = 25, p_breaks = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6)) {
data <- dat |> filter(label == x)
grid_size <- calculate_plot_grid(length(data$tax_name))
l <- lapply(data$name, function(X) {
df1 <- data |>
filter(name == X)
p <- get_dmg_decay_fit(df1, orient = orient, pos = pos, p_breaks = p_breaks)
p <- p + ggtitle(X, paste("n_reads = ", df1$n_reads))
return(p)
})
plot <- ggpubr::ggarrange(plotlist = l, ncol = grid_size$cols, nrow = grid_size$rows, align = "hv")
tit <- paste0("Sample: ", x)
ggpubr::annotate_figure(plot, top = ggpubr::text_grob(tit,
color = "black", face = "bold", size = 12
))
}, .progress = TRUE)
names(plots50_good) <- samples
pdf("plot50good.pdf", width = 20, height = 20)
print(plots50_good)
dev.off()
# 100 reads, bad fit
tax <- dat100_filt |>
ungroup() |>
inner_join(cdata) |>
filter(fit == "bad") |>
group_by(label) |>
slice_sample(n = 100) |>
ungroup()
tax <- dat100_filt |>
ungroup() |>
inner_join(metadata) |>
filter(fit == "bad") |>
group_by(label) |>
slice_sample(n = 100) |>
ungroup()
samples <- tax$label |> unique()
plots100_bad <- purrr::map(.x = samples, dat = tax, .f = function(x, dat, orient = "fwd", pos = 25, p_breaks = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6)) {
data <- dat |> filter(label == x)
grid_size <- calculate_plot_grid(length(data$tax_name))
l <- lapply(data$name, function(X) {
df1 <- data |>
filter(name == X)
p <- get_dmg_decay_fit(df1, orient = orient, pos = pos, p_breaks = p_breaks)
p <- p + ggtitle(X, paste("n_reads = ", df1$n_reads))
return(p)
})
plot <- ggpubr::ggarrange(plotlist = l, ncol = grid_size$cols, nrow = grid_size$rows, align = "hv")
tit <- paste0("Sample: ", x)
ggpubr::annotate_figure(plot, top = ggpubr::text_grob(tit,
color = "black", face = "bold", size = 12
))
}, .progress = TRUE)
names(plots100_bad) <- samples
pdf("plots100_bad.pdf", width = 20, height = 20)
print(plots100_bad)
dev.off()
# 50 reads, bad fit
tax <- dat50_filt |>
ungroup() |>
inner_join(metadata) |>
filter(fit == "bad") |>
group_by(label) |>
slice_sample(n = 10) |>
ungroup()
samples <- tax$label |> unique()
plots50_bad <- purrr::map(.x = samples, dat = tax, .f = function(x, dat, orient = "fwd", pos = 25, p_breaks = c(0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6)) {
data <- dat |> filter(label == x)
grid_size <- calculate_plot_grid(length(data$tax_name))
l <- lapply(data$name, function(X) {
df1 <- data |>
filter(name == X)
p <- get_dmg_decay_fit(df1, orient = orient, pos = pos, p_breaks = p_breaks)
p <- p + ggtitle(X, paste("n_reads = ", df1$n_reads))
return(p)
})
plot <- ggpubr::ggarrange(plotlist = l, ncol = grid_size$cols, nrow = grid_size$rows, align = "hv")
tit <- paste0(data$specific_feature |> unique(),  " -- Depth: ", data$Depth |> unique(), " -- Sample: ", x)
ggpubr::annotate_figure(plot, top = ggpubr::text_grob(tit,
color = "black", face = "bold", size = 12
))
}, .progress = TRUE)
names(plots50_bad) <- samples
pdf("plots50_bad.pdf", width = 20, height = 20)
print(plots50_bad)
dev.off()
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(ggplot2)
library(ggrepel)
library(ComplexHeatmap)
B_vcf <- read.table("/Users/hsf378/Downloads/B.vcf.txt", col.names = "pos")
C_vcf <- read.table("/Users/hsf378/Downloads/C.vcf.txt", col.names = "pos")
D_vcf <- read.table("/Users/hsf378/Downloads/D.vcf.txt", col.names = "pos")
lt=list(B=B_vcf$pos,
C=C_vcf$pos,
D=D_vcf$pos)
m =make_comb_mat(lt)
UpSet(m)
UpSet(m,set_order = c("B", "C", "D"),
comb_order = order(comb_size(m)),
top_annotation = upset_top_annotation(m, add_numbers = TRUE),
right_annotation = upset_right_annotation(m, add_numbers = TRUE))
UpSet(m,set_order = c("B", "C", "D"),
# comb_order = order(comb_size(m)),
top_annotation = upset_top_annotation(m, add_numbers = TRUE),
right_annotation = upset_right_annotation(m, add_numbers = TRUE))
install.packages("phylter")
library(phylter)
locus.trees <- read.tree('/Users/hsf378/Downloads/genetrees.nwk')
library(phylter)
locus.trees <- read.tree('/Users/hsf378/Downloads/genetrees.nwk')
library(ape)
locus.trees <- read.tree('/Users/hsf378/Downloads/genetrees.nwk')
names <- readLines("/Users/hsf378/Downloads/list.txt")
results <- phylter(locus.trees, gene.names = names)
results$Final$Outliers
results$Final$Outliers[1,]
results$Final$Outliers[,1]
outliers_og <- results$Final$Outliers[,1]
knitr::opts_chunk$set(echo = TRUE)
library(AnnotationForge)
library(clusterProfiler)
library(tidyverse)
test_enrich <- enricher(gene = outliers_og,
TERM2GENE = goname,
TERM2NAME = goterm)
go_all <- read.table("/Users/hsf378/Downloads/candidate_at32523.txt", header = F, col.names = c("GID","ontology","GO","Support_number"), sep = "\t")
go_table <- go_all %>%
select(GO,GID) %>%
filter(str_detect(GO,"GO")) %>%
mutate(goterm = Term(GO))
goname <- go_table %>% select(GO,GID)
goterm <- go_table %>% select(GO,goterm)
test_enrich <- enricher(gene = outliers_og,
TERM2GENE = goname,
TERM2NAME = goterm)
barplot(test_enrich, showCategory=20)
barplot(test_enrich)
test_enrich
outliers_og
goname
test_enrich
test_enrich <- enricher(gene = c(outliers_og),
TERM2GENE = goname,
TERM2NAME = goterm)
test_enrich
goname %>% filter(GID %in% outliers_og)
goname %>% filter(GID %in% outliers_og) %>% table(.$GID)
goname %>% filter(GID %in% outliers_og) %>% table(GID)
goname %>% filter(GID %in% outliers_og) %>% table(.$GID)
tt <- goname %>% filter(GID %in% outliers_og)
table(tt$GID)
length(table(tt$GID))
length(unique(outliers_og))
length(table(outliers_og))
table(outliers_og
)
test_enrich <- enricher(gene = unique(outliers_og),
TERM2GENE = goname,
TERM2NAME = goterm)
barplot(test_enrich)
unique(outliers_og)
goname %>% filter(GID %in% outliers_og)
goname %>% filter(GID %in% outliers_og) %>% unique(GID)
test_enrich <- enricher(gene = unique(tt$GID),
TERM2GENE = goname,
TERM2NAME = goterm)
barplot(test_enrich)
test_enrich
enricher(gene = unique(tt$GID),
pAdjustMethod = "none",
TERM2GENE = goname,
TERM2NAME = goterm)
enricher(gene = c("100088at32523", "101062at32523"),
pAdjustMethod = "none",
TERM2GENE = goname,
TERM2NAME = goterm)
enricher(gene = c("100088at32523", "101062at32523"),
pvalueCutoff = 1,
pAdjustMethod = "none",
TERM2GENE = goname,
TERM2NAME = goterm)
enricher(gene = outliers_og,
pvalueCutoff = 1,
pAdjustMethod = "none",
TERM2GENE = goname,
TERM2NAME = goterm)
enricher(gene = outliers_og,
pvalueCutoff = 100,
pAdjustMethod = "none",
TERM2GENE = goname,
TERM2NAME = goterm)
enricher(gene = outliers_og,
pvalueCutoff = 100,
pAdjustMethod = "none",
qvalueCutoff = 100,
TERM2GENE = goname,
TERM2NAME = goterm)
go_all
go_bp <- go_all %>%
filter(ontology == "biological_process",
str_detect(GO,"GO")) %>%
select(GO,GID) %>%
mutate(goterm = Term(GO))
go_bp <- go_all %>%
filter(ontology == "biological_process",
str_detect(GO,"GO")) %>%
select(GO,GID) %>%
mutate(goterm = Term(GO))
go_bp_name <- go_bp %>% select(GO,GID)
go_bp_term <- go_bp %>% select(GO,goterm)
bp_enrich <- enricher(gene = outliers_og,
pvalueCutoff = 100,
pAdjustMethod = "none",
qvalueCutoff = 100,
TERM2GENE = go_bp_name,
TERM2NAME = go_bp_term)
bp_enrich
go_cc <- go_all %>%
filter(ontology == "cellular_component",
str_detect(GO,"GO")) %>%
select(GO,GID) %>%
mutate(goterm = Term(GO))
go_cc_name <- go_cc %>% select(GO,GID)
go_cc_term <- go_cc %>% select(GO,goterm)
cc_enrich <- enricher(gene = outliers_og,
pvalueCutoff = 100,
pAdjustMethod = "none",
qvalueCutoff = 100,
TERM2GENE = go_cc_name,
TERM2NAME = go_cc_term)
cc_enrich
cc_enrich <- enricher(gene = outliers_og,
# pvalueCutoff = 100,
pAdjustMethod = "none",
# qvalueCutoff = 100,
TERM2GENE = go_cc_name,
TERM2NAME = go_cc_term)
cc_enrich
go_mf <- go_all %>%
filter(ontology == "molecular_function",
str_detect(GO,"GO")) %>%
select(GO,GID) %>%
mutate(goterm = Term(GO))
go_mf_name <- go_mf %>% select(GO,GID)
go_mf_term <- go_mf %>% select(GO,goterm)
mf_enrich <- enricher(gene = outliers_og,
pvalueCutoff = 100,
pAdjustMethod = "none",
qvalueCutoff = 100,
TERM2GENE = go_mf_name,
TERM2NAME = go_mf_term)
mf_enrich
GSEA(gene = outliers_og,
pvalueCutoff = 100,
pAdjustMethod = "none",
qvalueCutoff = 100,
TERM2GENE = go_mf_name,
TERM2NAME = go_mf_term)
GSEA(gene = sort(outliers_og, decreasing = TRUE),
pvalueCutoff = 100,
pAdjustMethod = "none",
qvalueCutoff = 100,
TERM2GENE = go_mf_name,
TERM2NAME = go_mf_term)
GSEA(gene = sort(tt$GID, decreasing = TRUE),
pvalueCutoff = 100,
pAdjustMethod = "none",
qvalueCutoff = 100,
TERM2GENE = go_mf_name,
TERM2NAME = go_mf_term)
data(geneList, package="DOSE")
geneList
cell_marker_data <- vroom::vroom('http://bio-bigdata.hrbmu.edu.cn/CellMarker/download/Human_cell_markers.txt')
install.packages("vroom")
install.packages("vroom")
cell_marker_data <- vroom::vroom('http://bio-bigdata.hrbmu.edu.cn/CellMarker/download/Human_cell_markers.txt')
cell_marker_data <- vroom::vroom('https://export.uppmax.uu.se/naiss2023-23-3/workshops/workshop-scrnaseq/human_cell_markers.txt')
cells <- cell_marker_data %>%
dplyr::select(cellName, geneID) %>%
dplyr::mutate(geneID = strsplit(geneID, ', ')) %>%
tidyr::unnest()
cells
knitr::opts_chunk$set(echo = TRUE)
library(AnnotationForge)
library(clusterProfiler)
library(tidyverse)
library(ape)
library(phangorn)
library(factoextra)
library(ggplot2)
library(TreeDist)
library(cowplot)
library(ggpubr)
library(ComplexHeatmap)
og_candidate_1
## import the species tree
species_tree <- read.tree("Data/concord.cf.tree_concat.nwk")
getwd()
setwd("/Users/hsf378/PhD/Analysis/turtle-jeans/")
## import the species tree
species_tree <- read.tree("Data/concord.cf.tree_concat.nwk")
setwd("/Users/hsf378/PhD/Analysis/turtle-jeans/")
## import the species tree
species_tree <- read.tree("Data/concord.cf.tree_concat.nwk")
setwd("/Users/hsf378/PhD/Analysis/turtle-jeans")
## import the species tree
species_tree <- read.tree("Data/concord.cf.tree_concat.nwk")
knitr::opts_chunk$set(echo = TRUE)
library(AnnotationForge)
library(clusterProfiler)
library(tidyverse)
library(ape)
library(phangorn)
library(factoextra)
library(ggplot2)
library(TreeDist)
library(cowplot)
library(ggpubr)
library(ComplexHeatmap)
setwd("/Users/hsf378/PhD/Analysis/turtle-jeans")
## import the species tree
species_tree <- read.tree("Data/concord.cf.tree_concat.nwk")
knitr::opts_chunk$set(echo = TRUE)
library(AnnotationForge)
library(clusterProfiler)
library(tidyverse)
library(ape)
library(phangorn)
library(factoextra)
library(ggplot2)
library(TreeDist)
library(cowplot)
library(ggpubr)
library(ComplexHeatmap)
species_tree <- read.tree("/Users/hsf378/PhD/Analysis/turtle-jeans/Data/concord.cf.tree_concat.nwk")
locus.trees <- read.tree("Data/genetrees.nwk")
locus.trees <- read.tree("/Users/hsf378/PhD/Analysis/turtle-jeans/Data/genetrees.nwk")
names <- read.table("/Users/hsf378/PhD/Analysis/turtle-jeans/Data/list.txt")
og_list <- read.table("/Users/hsf378/PhD/Analysis/turtle-jeans/Data/list.txt")
