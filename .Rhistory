# Detect outliers and extract quantiles and chi-square for meangene
dNdS_outliers <- detect_outliers_and_extract_quantiles(dNdS_impute, dNdS_log, quantile_threshold = 0.95)
dN_outliers <- detect_outliers_and_extract_quantiles(dN_impute, dN_log, quantile_threshold = 0.95)
dS_outliers <- detect_outliers_and_extract_quantiles(dS_impute, dS_log, quantile_threshold = 0.95)
pure_outliers <- detect_outliers_and_extract_quantiles(pure_impute, pure_log, quantile_threshold = 0.95)
text <- dNdS_outliers$indices
write.csv(text,'Results/outliers_genes_dnds_q95.csv')
text <- dN_outliers$indices
write.csv(text,'Results/outliers_genes_dn_q95.csv')
text <- dS_outliers$indices
write.csv(text,'Results/outliers_genes_ds_q95.csv')
text <- pure_outliers$indices
write.csv(text,'Results/outliers_genes_pure_q95.csv')
outlierSpeciesTranspose <- function(matrices_list) {
# Extract the gene names and the list of matrices
gene_names <- matrices_list[[1]]
matrices <- matrices_list[[2]]
# Initialize an empty list to store the renamed matrices
matrices_renamed <- list()
# Loop through the matrices and rename rows based on gene names
for (i in 1:length(matrices)) {
# Get the current matrix
mat <- matrices[[i]]
# Assign the new row names by appending the gene name
rownames(mat) <- paste0(rownames(mat), '_', names(matrices)[i])
# Add the renamed matrix to the list
matrices_renamed[[i]] <- mat
}
# Combine the matrices by rows
df <- do.call(rbind, matrices_renamed)
return(df)
}
dNdS_df <- outlierSpeciesTranspose(dNdS_outliers)
dN_df <- outlierSpeciesTranspose(dN_outliers)
dS_df <- outlierSpeciesTranspose(dS_outliers)
pure_df <- outlierSpeciesTranspose(pure_outliers)
dNdS_outliers_species <- detect_outliers_and_extract_chisq(dNdS_impute, dNdS_df, conf = 0.95)
dN_outliers_species <- detect_outliers_and_extract_chisq(dN_impute, dN_df, conf = 0.95)
dNdS_outliers_species <- detect_outliers_and_extract_chisq(dNdS_impute, dNdS_df, conf = 0.95)
dN_outliers_species <- detect_outliers_and_extract_chisq(dN_impute, dN_df, conf = 0.95)
dS_outliers_species <- detect_outliers_and_extract_chisq(dS_impute, dS_df, conf = 0.95)
pure_outliers_species <- detect_outliers_and_extract_chisq(pure_impute, pure_df, conf = 0.95)
dNdS_outliers_species
dNdS_df
dNdS_outliers
dN_outliers
dS_outliers
pure_outliers
View(dNdS_outliers)
matrices <- dNdS_impute
df <- dNdS_log
quantile_threshold = 0.95
# Compute Mahalanobis distances for matrices
center_matrix <- colMeans(df, na.rm = T)
center_matrix
cov_matrix <- cov(df, use = "pairwise.complete.obs")
cov_matrix
#return mahalanobis distances
distances <- mahalanobis(df, center_matrix, cov_matrix)
distances
# Calculate the quantile threshold
threshold <- quantile(distances, quantile_threshold)
threshold
hist(distances)
vline(threshold)
abline(v = threshold)
df_dim <- ncol(df)
p <- pchisq(distances, df = df_dim, lower.tail = F)
# Convert Mahalanobis distances to Z-scores (approximate)
z_scores <- scale(distances)
# Tail probabilities (upper tail)
p_values_normal <- pnorm(z_scores, lower.tail = FALSE)
# OR get density (not p-value)
densities <- dnorm(z_scores)
### TAIL PROBABILITES
# Number of features (columns)
df_dim <- ncol(df)
# Compute Mahalanobis distances
center <- colMeans(df, na.rm = TRUE)
cov_matrix <- cov(df, use = "pairwise.complete.obs")
# Compute tail probabilities (p-values)
p_values <- pchisq(distances, df = df_dim, lower.tail = FALSE)
p_values
hist(p_values)
hist(p_values[outlier_indices])
# Identify outlier indices
outlier_indices <- names(which(distances > threshold))
hist(p_values[outlier_indices])
p_values[outlier_indices]
mean(p_values[outlier_indices])
# Compute tail probabilities (p-values)
p_values <- pchisq(distances, lower.tail = FALSE)
# Compute tail probabilities (p-values)
p_values <- pchisq(distances,df = df_dim, lower.tail = FALSE)
pchisq <- pchisq(distances, df = df_dim, lower.tail = FALSE)
z_scores <- scale(distances)
p_values_normal <- pnorm(z_scores, lower.tail = FALSE)
p_values_normal[outlier_indices]
p_values_normal
View(p_values_normal)
p_values_normal
View(p_values_normal)
vec <- p_values_normal$V1
vec <- p_values_normal
names(vec) <- rownames(p_values_normal)
vec
vec <- p_values_normal[1,]
vec <- p_values_normal[1,]
z_scores <- scale(distances)
p_values_normal <- pnorm(z_scores, lower.tail = FALSE)
vec <- p_values_normal[,1]
names(vec) <- rownames(p_values_normal)
vec
vec[outlier_indices]
hist(vec)
vec
densities <- dnorm(z_scores)
# scale
hist(distances)
z_scores <- scale(distances)
z_scores
p_values_normal <- pnorm(z_scores, lower.tail = FALSE)
# get value
vec <- p_values_normal[,1]
# named vector
names(vec) <- rownames(p_values_normal)
# index
vec[outlier_indices]
# index
hist(vec[outlier_indices])
### PChisq
df_dim <- ncol(df)
pchisq <- pchisq(distances, df = df_dim, lower.tail = FALSE)
pchisq
hist(pchisq[outlier_indices])
# index
hist(vec[outlier_indices])
hist(pchisq[outlier_indices])
# index
hist(vec[outlier_indices])
hist(pchisq[outlier_indices])
### PChisq
df_dim <- ncol(df)
pchisq <- pchisq(distances, df = df_dim, lower.tail = FALSE)
hist(pchisq[outlier_indices])
saveRDS(matrices,'Scripts/test_zscores/matrices.rds')
saveRDS(df,'Scripts/test_zscores/matrices.rds')
saveRDS(matrices,'Scripts/test_zscores/matrices.rds')
saveRDS(df,'Scripts/test_zscores/df.rds')
matrices <- readRDS('Scripts/test_zscores/matrices.rds')
df <- readRDS('Scripts/test_zscores/df.rds')
quantile_threshold = 0.95
### PChisq
df_dim <- ncol(df)
pchisq <- pchisq(distances, df = df_dim, lower.tail = FALSE)
hist(pchisq[outlier_indices])
hist(log(pchisq[outlier_indices]))
pchisq[outlier_indices]
min(pchisq[outlier_indices])
min(max[outlier_indices])
max(pchisq[outlier_indices])
hist(distances)
hist(scale(distances))
# index
hist(vec[outlier_indices])
hist(pchisq[outlier_indices])
mean(pchisq[outlier_indices])
matrices <- readRDS('Scripts/test_zscores/matrices.rds')
df <- readRDS('Scripts/test_zscores/df.rds')
quantile_threshold = 0.95
# Compute Mahalanobis distances for matrices
center_matrix <- colMeans(df, na.rm = T)
cov_matrix <- cov(df, use = "pairwise.complete.obs")
#return mahalanobis distances
distances <- mahalanobis(df, center_matrix, cov_matrix)
### get chisq values
df_dim <- ncol(df)
hist(pchisq[outlier_indices])
pchisq
# Calculate the quantile threshold
threshold <- quantile(distances, quantile_threshold)
# Identify outlier indices
outlier_indices <- names(which(distances > threshold))
outlier_indices
distances
pchisq
### get chisq values
df_dim <- ncol(df)
pchisq <- pchisq(distances, df = df_dim, lower.tail = FALSE)
pchisq
detect_outliers_and_extract_quantiles <- function(matrices, df, quantile_threshold = 0.95) {
# Compute Mahalanobis distances for matrices
center_matrix <- colMeans(df, na.rm = T)
cov_matrix <- cov(df, use = "pairwise.complete.obs")
#return mahalanobis distances
distances <- mahalanobis(df, center_matrix, cov_matrix)
### get chisq values
df_dim <- ncol(df)
pchisq <- pchisq(distances, df = df_dim, lower.tail = FALSE)
# Calculate the quantile threshold
threshold <- quantile(distances, quantile_threshold)
# Identify outlier indices
outlier_indices <- names(which(distances > threshold))
# Extract outlier matrices
outlier_matrices <- matrices[outlier_indices]
# Return a list with indices and matrices
list(indices = outlier_indices, matrices = outlier_matrices,
distances_all = distances, pchisq_all = pchisq)
}
matrices <- readRDS('Scripts/test_zscores/matrices.rds')
df <- readRDS('Scripts/test_zscores/df.rds')
quantile_threshold = 0.95
detect_outliers_and_extract_quantiles <- function(matrices, df, quantile_threshold = 0.95) {
# Compute Mahalanobis distances for matrices
center_matrix <- colMeans(df, na.rm = T)
cov_matrix <- cov(df, use = "pairwise.complete.obs")
#return mahalanobis distances
distances <- mahalanobis(df, center_matrix, cov_matrix)
### get chisq values
df_dim <- ncol(df)
pchisq <- pchisq(distances, df = df_dim, lower.tail = FALSE)
# Calculate the quantile threshold
threshold <- quantile(distances, quantile_threshold)
# Identify outlier indices
outlier_indices <- names(which(distances > threshold))
# Extract outlier matrices
outlier_matrices <- matrices[outlier_indices]
# Return a list with indices and matrices
list(indices = outlier_indices, matrices = outlier_matrices,
distances_all = distances, pchisq_all = pchisq)
}
t <- detect_outliers_and_extract_quantiles(matrices,df,quantile_threshold)
t
str(t)
library(tidyverse)
library(ape)
library(phylter)
library(TreeTools)
# load gene trees
locus.trees <- read.tree('Data/genetrees.nwk')
# load gene names
names <- readLines("Scripts/dN_dS/list_final.txt")
### Drop outgroups
locus.trees <- drop.tip.multiPhylo(locus.trees, c("homSap", "galGal", "allMis"))
tips <- AllTipLabels(locus.trees)
# filter based on at least 9 tips (50 % of taxa present)
names <- names[Ntip(locus.trees) >= 9]
locus.trees <- locus.trees[Ntip(locus.trees) >= 9]
# RUNNN phylteR to get outliers
results <- phylter(locus.trees, gene.names = names)
# LOAD DATA ----------------------------------------------------------------
### READ PWD
list <- list.files('Data/dist_matrices',
pattern = '*.dist',
full.names = T)
matrices <- list()
for(i in list){
base <- basename(i)
name <- strsplit(base,'.dist')[[1]]
dist <- read.table(i)
matrices[[name]] <- as.matrix(dist)
}
matrices_nonzero <- lapply(matrices, function(mat) {
mat[mat == 0] <- NA
return(mat)
})
### READ dNdS
# Define the folder containing the data
data_folder <- "Data/dN_dS_final_data"
# List all _dN.dist and _dS.dist files
dN_files <- list.files(data_folder, pattern = "_dN\\.dist$", full.names = TRUE)
dS_files <- list.files(data_folder, pattern = "_dS\\.dist$", full.names = TRUE)
# Ensure the files are paired and match
if (!all(gsub("_dN\\.dist$", "", basename(dN_files)) == gsub("_dS\\.dist$", "", basename(dS_files)))) {
stop("Mismatch between dN and dS files!")
}
# Initialize empty lists to store matrices
dN_matrices <- list()
dS_matrices <- list()
# Loop through all files and read data
for (i in seq_along(dN_files)) {
# Check if the file is empty
if (file.info(dN_files[i])$size == 0 || file.info(dS_files[i])$size == 0) {
warning(paste("Skipping empty file pair:", dN_files[i], "and", dS_files[i]))
next
}
matrix_name <- gsub("_dN\\.dist$", "", basename(dN_files[i]))
# Read the number of species from the first line
n_species <- as.integer(readLines(dN_files[i], n = 1))
# Load dN and dS matrices
dN <- read.table(dN_files[i], row.names = 1, skip = 1, fill = TRUE,
col.names = paste0("V", 1:(n_species + 1)))
dS <- read.table(dS_files[i], row.names = 1, skip = 1, fill = TRUE,
col.names = paste0("V", 1:(n_species + 1)))
# Adjust column names to match species names
colnames(dN) <- rownames(dN)
colnames(dS) <- rownames(dS)
# Store matrices in lists
dN_matrices[[matrix_name]] <- as.matrix(dN)
dS_matrices[[matrix_name]] <- as.matrix(dS)
}
# Check the data
summary(dN_matrices)
summary(dS_matrices)
# Initialize an empty list to store the dN/dS results
dN_matrices_nonzero <- list()
dS_matrices_nonzero <- list()
dN_nonzero <- lapply(dN_matrices, function(mat) {
mat[mat == 0] <- NA
return(mat)
})
dS_nonzero <- lapply(dS_matrices, function(mat) {
mat[mat == 0] <- NA
return(mat)
})
dN_dS_matrices_nonzero <- list()
# Loop through the names of dN_matrices
for (name in names(dN_matrices)) {
# Check if there is a corresponding dS matrix
if (!name %in% names(dS_matrices)) {
warning(paste("No matching dS matrix found for", name))
next
}
print(name)
# Perform element-wise division
dN_dS <- dN_nonzero[[name]] / dS_nonzero[[name]]
# Store the result in the list
dN_dS_matrices_nonzero[[name]] <- dN_dS
}
### check if all goes well
dN_nonzero[['121468at32523']]
dS_nonzero[['121468at32523']]
dN_dS_matrices_nonzero[['121468at32523']]
# Required Libraries
library(MASS)  # For Mahalanobis distance
library(stats) # For Chi-squared distribution
### LOAD MATRIX OF INTEREST
source('Scripts/helperFunctions.R')
#dN_dS_matrices[[1]]
dNdS_checked <- matrixCheck(dN_dS_matrices_nonzero)
dNdS_checked[['121468at32523']]
dN_checked <- matrixCheck(dN_nonzero)
dN_checked[['121468at32523']]
dS_checked <- matrixCheck(dS_nonzero)
dS_checked[['121468at32523']]
pure_checked <- matrixCheck(matrices_nonzero)
pure_checked[['121468at32523']]
#impute from average across matrix
source("Scripts/impMean_matrixaverage.R")
dNdS_impute <- impMean_matrices(dNdS_checked)
dN_impute <- impMean_matrices(dN_checked)
dS_impute <- impMean_matrices(dS_checked)
pure_impute <- impMean_matrices(pure_checked)
dNdS_impute[['121468at32523']]
dN_impute[['121468at32523']]
dS_impute[['121468at32523']]
pure_impute[['121468at32523']]
# make combined dataframe
source("Scripts/stitchMatricesToDataFrame.R")
dNdS_2d <- stitchMatricesToDataFrame(dNdS_impute)
dN_2d <- stitchMatricesToDataFrame(dN_impute)
dS_2d <- stitchMatricesToDataFrame(dS_impute)
pure_2d <- stitchMatricesToDataFrame(pure_impute)
dNdS_log <- log(dNdS_2d)
dN_log <- log(dN_2d)
dS_log <- log(dS_2d)
pure_log <- log(pure_2d)
#detect outliers
source('Scripts/detectOutliers.R')
# Detect outliers and extract quantiles and chi-square for meangene
dNdS_outliers <- detect_outliers_and_extract_quantiles(dNdS_impute, dNdS_log, quantile_threshold = 0.95)
dN_outliers <- detect_outliers_and_extract_quantiles(dN_impute, dN_log, quantile_threshold = 0.95)
dS_outliers <- detect_outliers_and_extract_quantiles(dS_impute, dS_log, quantile_threshold = 0.95)
pure_outliers <- detect_outliers_and_extract_quantiles(pure_impute, pure_log, quantile_threshold = 0.95)
pure_outliers
str(pure_outliers)
text <- dNdS_outliers$indices
text
str(pure_outliers)
text <- data.frame(gene = dNdS_outliers$indices,
pval = dNdS_outliers$pchisq_all[dNdS_outliers$indices])
text
dNdS_indices <- data.frame(gene = dNdS_outliers$indices,
pval = dNdS_outliers$pchisq_all[dNdS_outliers$indices])
dN_indices <- data.frame(gene = dN_indices$indices,
pval = dN_indices$pchisq_all[dN_indices$indices])
write.csv(dN_indices,'Results/outliers_genes_dn_q95.csv')
dN_indices <- data.frame(gene = dN_outliers$indices,
pval = dN_outliers$pchisq_all[dN_outliers$indices])
write.csv(dN_indices,'Results/outliers_genes_dn_q95.csv')
dS_indices <- data.frame(gene = dS_outliers$indices,
pval = dS_outliers$pchisq_all[dS_outliers$indices])
dS_indices <- data.frame(gene = dS_outliers$indices,
pval = dS_outliers$pchisq_all[dS_outliers$indices])
write.csv(dS_indices,'Results/outliers_genes_ds_q95.csv')
pure_indices <- data.frame(gene = pure_outliers$indices,
pval = pure_outliers$pchisq_all[pure_outliers$indices])
dNdS_indices <- data.frame(gene = dNdS_outliers$indices,
pval = dNdS_outliers$pchisq_all[dNdS_outliers$indices])
write.csv(dNdS_indices,'Results/outliers_genes_dnds_q95.csv')
dN_indices <- data.frame(gene = dN_outliers$indices,
pval = dN_outliers$pchisq_all[dN_outliers$indices])
write.csv(dN_indices,'Results/outliers_genes_dn_q95.csv')
dS_indices <- data.frame(gene = dS_outliers$indices,
pval = dS_outliers$pchisq_all[dS_outliers$indices])
write.csv(dS_indices,'Results/outliers_genes_ds_q95.csv')
pure_indices <- data.frame(gene = pure_outliers$indices,
pval = pure_outliers$pchisq_all[pure_outliers$indices])
write.csv(pure_indices,'Results/outliers_genes_pure_q95.csv')
outlierSpeciesTranspose <- function(matrices_list) {
# Extract the gene names and the list of matrices
gene_names <- matrices_list[[1]]
matrices <- matrices_list[[2]]
# Initialize an empty list to store the renamed matrices
matrices_renamed <- list()
# Loop through the matrices and rename rows based on gene names
for (i in 1:length(matrices)) {
# Get the current matrix
mat <- matrices[[i]]
# Assign the new row names by appending the gene name
rownames(mat) <- paste0(rownames(mat), '_', names(matrices)[i])
# Add the renamed matrix to the list
matrices_renamed[[i]] <- mat
}
# Combine the matrices by rows
df <- do.call(rbind, matrices_renamed)
return(df)
}
dNdS_df <- outlierSpeciesTranspose(dNdS_outliers)
dN_df <- outlierSpeciesTranspose(dN_outliers)
dS_df <- outlierSpeciesTranspose(dS_outliers)
pure_df <- outlierSpeciesTranspose(pure_outliers)
dNdS_outliers_species <- detect_outliers_and_extract_chisq(dNdS_impute, dNdS_df, conf = 0.95)
dN_outliers_species <- detect_outliers_and_extract_chisq(dN_impute, dN_df, conf = 0.95)
dS_outliers_species <- detect_outliers_and_extract_chisq(dS_impute, dS_df, conf = 0.95)
pure_outliers_species <- detect_outliers_and_extract_chisq(pure_impute, pure_df, conf = 0.95)
str(pure_outliers_species)
outlier_obs <- list(dNdS_outliers,dN_outliers,dS_outliers,pure_outliers)
print(df$indices)
lapply(outlier_obs, function(df){
print(df$indices)
})
lapply(outlier_obs, function(outliers){
print(outliers$indices)
})
outliers
lapply(outlier_obs, function(outliers){
print(head(outliers$indices))
})
lapply(outlier_obs, function(outliers){
head(outliers$indices)
})
str(dNdS_outliers)
df <- dNdS_outliers
df
all_indices <- data.frame(
gene = df$distances_all
)
all_indices
str(df)
all_indices <- data.frame(
gene = names(df$distances_all),
distance = df$distances_all,
pval = df$pchisq_all[names(df$distances_all)]
)
write.csv(all_indices,paste0('Results/outliers_genes_', name, '_q95_allgenes.csv'), row.names = FALSE)
# Use Map to loop through both dfs and names simultaneously
Map(function(df, name) {
if (!is.null(df$indices)) {
outlier_indices <- data.frame(
gene = df$indices,
pval = df$pchisq_all[df$indices]
)
write.csv(outlier_indices, paste0('Results/outliers_genes_', name, '_q95.csv'), row.names = FALSE)
all_indices <- data.frame(
gene = names(df$distances_all),
distance = df$distances_all,
pval = df$pchisq_all[names(df$distances_all)]
)
write.csv(all_indices,paste0('Results/outliers_genes_', name, '_q95_allgenes.csv'), row.names = FALSE)
}
}, outlier_obs$dfs, outlier_obs$names)
all_indices <- data.frame(
gene = names(df$distances_all),
distance = df$distances_all,
pval = df$pchisq_all[names(df$distances_all)]
)
all_indices
all_indices
write.csv(all_indices,paste0('Results/outliers_genes_', name, '_q95_allgenes.csv'), row.names = FALSE)
# Your results
outlier_obs <- list(
dfs = list(dNdS_outliers, dN_outliers, dS_outliers, pure_outliers),
names = c('dnds', 'dn', 'ds', 'pure')  # no need for list()
)
df <- dNdS_outliers
# Use Map to loop through both dfs and names simultaneously
Map(function(df, name) {
if (!is.null(df$indices)) {
outlier_indices <- data.frame(
gene = df$indices,
pval = df$pchisq_all[df$indices]
)
write.csv(outlier_indices, paste0('Results/outliers_genes_', name, '_q95.csv'), row.names = FALSE)
all_indices <- data.frame(
gene = names(df$distances_all),
distance = df$distances_all,
pval = df$pchisq_all[names(df$distances_all)]
)
write.csv(all_indices,paste0('Results/outliers_genes_', name, '_q95_allgenes.csv'), row.names = FALSE)
}
}, outlier_obs$dfs, outlier_obs$names)
