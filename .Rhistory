coord_flip() +
facet_wrap(~ ontology, scales = "free_y") +
theme_bw() +
xlab("GO Term") +
ylab("Count") +
ggtitle("GO Enrichment Analysis") +
theme(strip.text = element_text(size = 12),  # Adjust facet label size
axis.text = element_text(size = 10),   # Adjust axis text size
axis.title = element_text(size = 14))  # Adjust axis title size
ggplot(plot_data, aes(x = Description, y = Count, fill = p.adjust)) +
geom_bar(stat = "identity") +
coord_flip() +
facet_wrap(~ ontology, scales = "free_y",nrow = 3) +
theme_bw() +
xlab("GO Term") +
ylab("Count") +
ggtitle("GO Enrichment Analysis") +
theme(strip.text = element_text(size = 12),  # Adjust facet label size
axis.text = element_text(size = 10),   # Adjust axis text size
axis.title = element_text(size = 14))
ggplot(plot_data, aes(x = Description, y = Count, fill = p.adjust)) +
geom_bar(stat = "identity") +
coord_flip() +
facet_wrap(~ ontology, scales = "free_y",nrow = 3) +
theme_bw() +
xlab(NULL) +
ylab("Count") +
scale_fill_gradient2(low = "grey", mid = "yellow", high = "red") +
theme(strip.text = element_text(size = 12),  # Adjust facet label size
axis.text = element_text(size = 10),   # Adjust axis text size
axis.title = element_text(size = 14))  # Adjust axis title size
ggsave("./Goenrich_speciesvsgenes.png", height = 10, width = 6)
ggsave("./Goenrich_speciesvsgenes.png", height = 5, width = 6)
ggsave("./Goenrich_speciesvsgenes.png", height = 6, width = 6)
ggsave("./Goenrich_speciesvsgenes.png", height = 3, width = 4)
ggsave("./Goenrich_speciesvsgenes.png", height = 3, width = 5)
ggsave("./Goenrich_speciesvsgenes.png", height = 7, width = 9)
og_candidate
og_candidate_1
og_list
og_candidate
og_candidate_1
locus.trees["144786at32523"]
plot(locus.trees["144786at32523"])
plot(locus.trees["144786at32523"])
locus.trees["144786at32523"]
which(names %in% og_candidate_1)
names[which(names %in% og_candidate_1)]
locus.trees[which(names %in% og_candidate_1)]
plot(locus.trees[which(names %in% og_candidate_1)])
merged_trees <- c(species_tree, locus.trees[which(names %in% og_candidate_1)])
ggdensitree(merged_trees, alpha=.3, colour='steelblue') +
geom_tiplab(size=3) + hexpand(.35)
ggdensitree(merged_trees, alpha=.3, colour='steelblue') +
geom_tiplab(size=3)
phangorn::densiTree(merged_trees, col = c("red", rep('steelblue',7)), alpha = 0.5)
phangorn::densiTree(merged_trees, col = c("red", rep('steelblue',7)), alpha = 0.5,consensus = TRUE))
phangorn::densiTree(merged_trees, col = c("red", rep('steelblue',7)), alpha = 0.5,consensus = TRUE)
phangorn::densiTree(merged_trees, col = c("red", rep('steelblue', 7)), alpha = 0.5, consensus = TRUE)
consensus_tree <- consensus(merged_trees)
Ntip(locus.trees[which(names %in% og_candidate_1)])
phangorn::densiTree(merged_trees, col = c("red", rep('steelblue', 7)), alpha = 0.5, consensus = TRUE)
phangorn::densiTree(merged_trees, col = c("red", rep('steelblue', 7)), alpha = 0.5)
ggdensitree(merged_trees, alpha=.3, colour='steelblue') +
geom_tiplab(size=3)
densiTree(merged_trees, col = c("red", rep('steelblue', 7)), alpha = 0.7)
og_list[normal_rf[which(normal_rf == 0)],]
which(normal_rf == 0)
normal_rf[which(normal_rf == 0)]
high_rf_distances
og_list[which(normal_rf == 0)]
[which(normal_rf == 0)
which(normal_rf == 0)
names(which(normal_rf == 0))
og_candidate
confident_gene_tree[which(Ntip(locus.trees[which(normal_rf == 0)])>10)]
confident_gene_tree <- names(which(normal_rf == 0))
confident_gene_tree[which(Ntip(locus.trees[which(normal_rf == 0)])>10)]
confident_gene_tree
confident_gene_tree[which(Ntip(locus.trees[which(normal_rf == 0)])>10)]
merge_species_confidence <- c(species_tree,locus.trees[confident_gene_tree[which(Ntip(locus.trees[which(normal_rf == 0)])>10)]])
densiTree(merged_trees, col = c("red", rep('steelblue', 216)), alpha = 0.7)
densiTree(merge_species_confidence, col = c("red", rep('steelblue', 216)), alpha = 0.7)
merge_species_confidence <- c(species_tree,locus.trees[confident_gene_tree[which(Ntip(locus.trees[which(normal_rf == 0)])>10)]])
densiTree(merge_species_confidence, col = c("red", rep('steelblue', 216)), alpha = 0.7)
locus.trees[confident_gene_tree[which(Ntip(locus.trees[which(normal_rf == 0)])>10)]]
merge_species_confidence <- c(species_tree,locus.trees[confident_gene_tree[which(Ntip(locus.trees[which(normal_rf == 0)])>10)]])
phangorn::densiTree(merge_species_confidence, col = c("red", rep('steelblue', 216)), alpha = 0.7)
plot(merge_species_confidence)
locus.trees[confident_gene_tree[which(Ntip(locus.trees[which(normal_rf == 0)])>10)]]
confident_genes <- confident_gene_tree[which(Ntip(locus.trees[which(normal_rf == 0)])>10)]
confident_genes
merge_species_confidence <- c(species_tree,locus.trees[which(names %in% confident_genes)])
plot(merge_species_confidence)
phangorn::densiTree(merge_species_confidence, col = c("red", rep('steelblue', 216)), alpha = 0.7)
phangorn::densiTree(merge_species_confidence, col = c("red", rep('steelblue', 216)), alpha = 0.7)
phangorn::densiTree(merge_species_confidence, col = c("black", rep('steelblue', 216)), alpha = 0.7)
merge_species_confidence <- c(locus.trees[which(names %in% confident_genes)], species_tree)
# plot(merge_species_confidence)
phangorn::densiTree(merge_species_confidence, col = c( rep('steelblue', 216),"black"), alpha = 0.7)
phangorn::densiTree(merge_species_confidence, col = c( rep('steelblue', 216),"black"), alpha = 0.7, type = "Phylogram")
phangorn::densiTree(merge_species_confidence, col = c( rep('steelblue', 216),"black"), alpha = 0.7, type = "phylogram")
phangorn::densiTree(merge_species_confidence, col = c( rep('steelblue', 216),"black"), alpha = 0.7)
phangorn::densiTree(merge_species_confidence, col = c( rep('steelblue', 216),"black"), alpha = 0.3)
phangorn::densiTree(merge_species_confidence, col = c( rep('steelblue', 216),"black"), alpha = 0.7)
densiTree(merged_trees, col = c("red", rep('steelblue', 7)), alpha = 0.7)
library(cowplot)
ggarrange(p_densi_disagree, p_hist
labels = c("A", "B"),
library(ggpubr)
p_densi_disagree <- densiTree(merged_trees, col = c("black", rep('steelblue', 7)), alpha = 0.7)
p_hist <- hist(normal_rf,xlab = "Normalized RF distance", main = NULL)
# plot(merge_species_confidence)
merge_species_confidence <- c(locus.trees[which(names %in% confident_genes)], species_tree)
p_densi_agree <- phangorn::densiTree(merge_species_confidence, col = c( rep('steelblue', 216),"black"), alpha = 0.7)
ggarrange(p_densi_agree,p_densi_disagree, p_hist
labels = c("A", "B","C"),
ggarrange(p_densi_agree,p_densi_disagree, p_hist,
labels = c("A", "B","C"),
nrow = 3)
pdf("densiTree_plot.pdf", width = 10, height = 7)
phangorn::densiTree(merge_species_confidence, col = c( rep('steelblue', 216),"black"), alpha = 0.7)
densiTree(merged_trees, col = c("black", rep('steelblue', 7)), alpha = 0.7)
hist(normal_rf,xlab = "Normalized RF distance", main = NULL)
dev.off
pdf("densiTree_plot.pdf", width = 10, height = 7)
par(mfrow = c(1, 3))
phangorn::densiTree(merge_species_confidence, col = c( rep('steelblue', 216),"black"), alpha = 0.7)
densiTree(merged_trees, col = c("black", rep('steelblue', 7)), alpha = 0.7)
hist(normal_rf,xlab = "Normalized RF distance", main = NULL)
dev.off
pdf("densiTree_plot.pdf", width = 10, height = 7)
par(mfrow = c(1, 2))
#phangorn::densiTree(merge_species_confidence, col = c( rep('steelblue', 216),"black"), alpha = 0.7)
densiTree(merged_trees, col = c("black", rep('steelblue', 7)), alpha = 0.7)
hist(normal_rf,xlab = "Normalized RF distance", main = NULL)
dev.off
GSEA(gene = normal_rf[og_candidate_1][order(normal_rf[og_candidate_1], decreasing = T)],
# pvalueCutoff = 100,
pAdjustMethod = "fdr",
# qvalueCutoff = 100,
TERM2GENE = go_all_name,
TERM2NAME = go_all_term)
outliers_og_subset
plot(species_tree)
tiplabels(species_tree)
tips(species_tree)
plot(species_tree)
meta_turtles <- read_tsv("Data/metadata_habitat.tsv")
meta_turtles
results$Final$Outliers
results$Final$Outliers %>% as_data_frame(.)
results$Final$Outliers %>% as_data_frame(.) %>% left_join(.,meta_turtles, by = c("V2" == "Species"))
results$Final$Outliers %>% as_data_frame(.) %>% left_join(.,meta_turtles, by = c("V2" = "Species"))
results$Final$Outliers %>%
as_data_frame(.) %>%
left_join(.,meta_turtles, by = c("V2" = "Species")) %>%
remove_missing(.)
Outliers_all <- results$Final$Outliers %>%
as_data_frame(.) %>%
left_join(.,meta_turtles, by = c("V2" = "Species")) %>%
remove_missing(.)
Outliers_all
Outliers_Freshwater <- Outliers_all %>% filter(Habitat == "Freshwater")
Outliers_Terrestrial<- Outliers_all %>% filter(Habitat == "Terrestrial")
Outliers_Marine <- Outliers_all %>% filter(Habitat == "Marine")
Outliers_Freshwater
enrich_plot <- function(df,plot_name){
bp <- enricher(gene = unique(df$V1),
pAdjustMethod = "fdr",
TERM2GENE = go_bp_name,
TERM2NAME = go_bp_term)
cc <- enricher(gene = unique(df$V1),
pAdjustMethod = "fdr",
TERM2GENE = go_cc_name,
TERM2NAME = go_cc_term)
mf <- enricher(gene = unique(df$V1),
pAdjustMethod = "fdr",
TERM2GENE = go_mf_name,
TERM2NAME = go_mf_term)
# Add an 'ontology' column to each data frame to indicate the GO category
bp_df1 <- as.data.frame(bp) %>% mutate(ontology = "BP")
cc_df1 <- as.data.frame(cc) %>% mutate(ontology = "CC")
mf_df1 <- as.data.frame(mf) %>% mutate(ontology = "MF")
# Combine the data frames into one
combined_result1 <- bind_rows(bp_df1, cc_df1, mf_df1)
# Select only necessary columns for plotting (for example, "Description", "p.adjust", "Count", and "ontology")
plot_data1 <- combined_result1 %>%
select(Description, Count, p.adjust, ontology) %>%
remove_missing(.)
# Create the bar plot with facet_wrap
ggplot(plot_data1, aes(x = Description, y = Count, fill = p.adjust)) +
geom_bar(stat = "identity") +
coord_flip() +
facet_wrap(~ ontology, scales = "free_y",nrow = 3) +
theme_bw() +
xlab(NULL) +
ylab("Count") +
scale_fill_gradient2(low = "grey", mid = "yellow", high = "red") +
theme(strip.text = element_text(size = 12),  # Adjust facet label size
axis.text = element_text(size = 10),   # Adjust axis text size
axis.title = element_text(size = 14))  # Adjust axis title size
ggsave(plot_name, height = 7, width = 9)
}
enrich_plot(Outliers_Freshwater,"Outliers_Freshwater.png")
enrich_plot(Outliers_Marine,"Outliers_Freshwater.png")
enrich_plot(Outliers_Marine,"Outliers_Marine.png")
enrich_plot <- function(df,plot_name,h,w){
bp <- enricher(gene = unique(df$V1),
pAdjustMethod = "fdr",
TERM2GENE = go_bp_name,
TERM2NAME = go_bp_term)
cc <- enricher(gene = unique(df$V1),
pAdjustMethod = "fdr",
TERM2GENE = go_cc_name,
TERM2NAME = go_cc_term)
mf <- enricher(gene = unique(df$V1),
pAdjustMethod = "fdr",
TERM2GENE = go_mf_name,
TERM2NAME = go_mf_term)
# Add an 'ontology' column to each data frame to indicate the GO category
bp_df1 <- as.data.frame(bp) %>% mutate(ontology = "BP")
cc_df1 <- as.data.frame(cc) %>% mutate(ontology = "CC")
mf_df1 <- as.data.frame(mf) %>% mutate(ontology = "MF")
# Combine the data frames into one
combined_result1 <- bind_rows(bp_df1, cc_df1, mf_df1)
# Select only necessary columns for plotting (for example, "Description", "p.adjust", "Count", and "ontology")
plot_data1 <- combined_result1 %>%
select(Description, Count, p.adjust, ontology) %>%
remove_missing(.)
# Create the bar plot with facet_wrap
ggplot(plot_data1, aes(x = Description, y = Count, fill = p.adjust)) +
geom_bar(stat = "identity") +
coord_flip() +
facet_wrap(~ ontology, scales = "free_y",nrow = 3) +
theme_bw() +
xlab(NULL) +
ylab("Count") +
scale_fill_gradient2(low = "grey", mid = "yellow", high = "red") +
theme(strip.text = element_text(size = 12),  # Adjust facet label size
axis.text = element_text(size = 10),   # Adjust axis text size
axis.title = element_text(size = 14))  # Adjust axis title size
ggsave(plot_name, height = h, width = w)
}
enrich_plot(Outliers_Marine,"Outliers_Marine.png",10,9)
enrich_plot(Outliers_Terrestrial,"Outliers_Terrestrial.png",10,9)
meta_turtles <- read_tsv("Data/metadata_habitat.tsv")
Outliers_all <- results$Final$Outliers %>%
as_data_frame(.) %>%
left_join(.,meta_turtles, by = c("V2" = "Species")) %>%
remove_missing(.)
Outliers_Rivers <- Outliers_all %>% filter(Habitat == "Rivers")
Outliers_Swamps <- Outliers_all %>% filter(Habitat == "Swamps")
Outliers_Lakes <- Outliers_all %>% filter(Habitat == "Lakes")
Outliers_Terrestrial<- Outliers_all %>% filter(Habitat == "Terrestrial")
Outliers_Marine <- Outliers_all %>% filter(Habitat == "Marine")
enrich_plot(Outliers_Rivers,"Outliers_Rivers.png",10,9)
enrich_plot(Outliers_Swamps,"Outliers_Swamps.png",10,9)
Outliers_Rivers
Outliers_Swamps
Outliers_Lakes
enrich_plot(Outliers_Lakes,"Outliers_Lakes.png",10,9)
enrich_plot(Outliers_Marine,"Outliers_Marine.png",10,9)
enrich_plot(Outliers_Terrestrial,"Outliers_Terrestrial.png",10,9)
Outliers_Terrestrial
Outliers_Rivers
enricher(gene = unique(Outliers_Rivers$V1),
pAdjustMethod = "fdr",
TERM2GENE = go_bp_name,
TERM2NAME = go_bp_term)
enricher(gene = unique(Outliers_Rivers$V1),
pAdjustMethod = "fdr",
TERM2GENE = go_cc_name,
TERM2NAME = go_cc_term)
enricher(gene = unique(Outliers_Rivers$V1),
pAdjustMethod = "fdr",
TERM2GENE = go_mf_name,
TERM2NAME = go_mf_term)
enricher(gene = unique(Outliers_Terrestrial$V1),
pAdjustMethod = "fdr",
TERM2GENE = go_bp_name,
TERM2NAME = go_bp_term)
enricher(gene = unique(Outliers_Terrestrial$V1),
pAdjustMethod = "fdr",
TERM2GENE = go_cc_name,
TERM2NAME = go_cc_term)
enricher(gene = unique(Outliers_Terrestrial$V1),
pAdjustMethod = "fdr",
TERM2GENE = go_mf_name,
TERM2NAME = go_mf_term)
enricher(gene = unique(Outliers_Lakes$V1),
pAdjustMethod = "fdr",
TERM2GENE = go_bp_name,
TERM2NAME = go_mf_term)
enricher(gene = unique(Outliers_Lakes$V1),
pAdjustMethod = "fdr",
TERM2GENE = go_bp_name,
TERM2NAME = go_mf_term) %>% as.data.frame(.)
enricher(gene = unique(Outliers_Lakes$V1),
pAdjustMethod = "fdr",
TERM2GENE = go_bp_name,
TERM2NAME = go_bp_term) %>% as.data.frame(.)
enricher(gene = unique(Outliers_Lakes$V1),
pAdjustMethod = "fdr",
TERM2GENE = go_bp_name,
TERM2NAME = go_bp_term) %>% as.data.frame(.)
enricher(gene = unique(Outliers_Lakes$V1),
pAdjustMethod = "fdr",
TERM2GENE = go_cc_name,
TERM2NAME = go_cc_term) %>% as.data.frame(.)
enricher(gene = unique(Outliers_Lakes$V1),
pAdjustMethod = "fdr",
TERM2GENE = go_mf_name,
TERM2NAME = go_mf_term) %>% as.data.frame(.)
enricher(gene = unique(Outliers_Lakes$V1),
pAdjustMethod = "fdr",
TERM2GENE = go_bp_name,
TERM2NAME = go_bp_term) %>% as.data.frame(.) %>% select(Description)
enricher(gene = unique(Outliers_Lakes$V1),
pAdjustMethod = "fdr",
TERM2GENE = go_cc_name,
TERM2NAME = go_cc_term) %>% as.data.frame(.) %>% select(Description)
enricher(gene = unique(Outliers_Lakes$V1),
pAdjustMethod = "fdr",
TERM2GENE = go_mf_name,
TERM2NAME = go_mf_term) %>% as.data.frame(.) %>% select(Description)
bind_rows(enricher(gene = unique(Outliers_Lakes$V1),
pAdjustMethod = "fdr",
TERM2GENE = go_bp_name,
TERM2NAME = go_bp_term) %>% as.data.frame(.) %>% select(Description),
enricher(gene = unique(Outliers_Lakes$V1),
pAdjustMethod = "fdr",
TERM2GENE = go_cc_name,
TERM2NAME = go_cc_term) %>% as.data.frame(.) %>% select(Description),
enricher(gene = unique(Outliers_Lakes$V1),
pAdjustMethod = "fdr",
TERM2GENE = go_mf_name,
TERM2NAME = go_mf_term) %>% as.data.frame(.) %>% select(Description)) %>%
write_tsv(.,"lake_go_enrich_list.tsv")
bind_rows(enricher(gene = unique(Outliers_Swamps$V1),
pAdjustMethod = "fdr",
TERM2GENE = go_bp_name,
TERM2NAME = go_bp_term) %>% as.data.frame(.) %>% select(Description),
enricher(gene = unique(Outliers_Swamps$V1),
pAdjustMethod = "fdr",
TERM2GENE = go_cc_name,
TERM2NAME = go_cc_term) %>% as.data.frame(.) %>% select(Description),
enricher(gene = unique(Outliers_Swamps$V1),
pAdjustMethod = "fdr",
TERM2GENE = go_mf_name,
TERM2NAME = go_mf_term) %>% as.data.frame(.) %>% select(Description)) %>%
write_tsv(.,"swamps_go_enrich_list.tsv")
bind_rows(enricher(gene = unique(Outliers_Marine$V1),
pAdjustMethod = "fdr",
TERM2GENE = go_bp_name,
TERM2NAME = go_bp_term) %>% as.data.frame(.) %>% select(Description),
enricher(gene = unique(Outliers_Marine$V1),
pAdjustMethod = "fdr",
TERM2GENE = go_cc_name,
TERM2NAME = go_cc_term) %>% as.data.frame(.) %>% select(Description),
enricher(gene = unique(Outliers_Marine$V1),
pAdjustMethod = "fdr",
TERM2GENE = go_mf_name,
TERM2NAME = go_mf_term) %>% as.data.frame(.) %>% select(Description)) %>%
write_tsv(.,"marine_go_enrich_list.tsv")
unique(outliers_og_subset)
merge_species_gene_trees <- c(species_tree, locus.trees[which(names %in% unique(outliers_og_subset))])
merge_species_gene_trees
col_all_tree <- c("black",rep('steelblue', 48))
phangorn::densiTree(merge_species_gene_trees, col = col_all_tree, alpha = 0.7)
merge_species_gene_trees
merge_species_gene_trees <- c( locus.trees[which(names %in% unique(outliers_og_subset))], species_tree)
col_all_tree <- c(rep('steelblue', 47),"black")
phangorn::densiTree(merge_species_gene_trees, col = col_all_tree, alpha = 0.7)
pdf("densiGeneTree_plot.pdf", width = 10, height = 7)
phangorn::densiTree(merge_species_gene_trees, col = col_all_tree, alpha = 0.7)
dev.off
unique(Outliers_Lakes$V1)
list_genes <- list(Lake = unique(Outliers_Lakes$V1),
Swamp = unique(Outliers_Swamps$V1),
River = unique(Outliers_Rivers$V1),
Marine = unique(Outliers_Marine$V1),
Terrestrial = unique(Outliers_Terrestrial$V1),)
unique(Outliers_Lakes$V1)
unique(Outliers_Swamps$V1)
unique(Outliers_Rivers$V1)
list_genes <- list(Lake = unique(Outliers_Lakes$V1),
Swamp = unique(Outliers_Swamps$V1),
River = unique(Outliers_Rivers$V1),
Marine = unique(Outliers_Marine$V1),
Terrestrial = unique(Outliers_Terrestrial$V1))
library(ComplexHeatmap)
m = make_comb_mat(list_genes)
UpSet(m, top_annotation = upset_top_annotation(m, add_numbers = TRUE),
right_annotation = upset_right_annotation(m, add_numbers = TRUE))
png("outlier_gene_habitat.png", width = 10, height = 7)
UpSet(m, top_annotation = upset_top_annotation(m, add_numbers = TRUE),
right_annotation = upset_right_annotation(m, add_numbers = TRUE))
dev.off
UpSet(m, top_annotation = upset_top_annotation(m, add_numbers = TRUE),
right_annotation = upset_right_annotation(m, add_numbers = TRUE))
ggsave("outlier_gene_habitat.png")
png("outlier_gene_habitat.png", width = 1000, height = 700, res = 150)
UpSet(m, top_annotation = upset_top_annotation(m, add_numbers = TRUE),
right_annotation = upset_right_annotation(m, add_numbers = TRUE))
dev.off()
phangorn::densiTree(merge_species_gene_trees, col = col_all_tree, alpha = 0.7, width = 0)
phangorn::densiTree(merge_species_gene_trees, col = col_all_tree, alpha = 0.7, width = 1)
phangorn::densiTree(merge_species_gene_trees, col = col_all_tree, alpha = 0.7, width = 2)
merge_species_gene_trees
merge_species_gene_trees <- c( locus.trees[which(names %in% unique(outliers_og_subset))], species_tree)
merge_species_gene_trees$edge.length <- NULL
merge_species_gene_trees <- c( locus.trees[which(names %in% unique(outliers_og_subset))], species_tree)
# Assuming merge_species_gene_trees is a multiPhylo object (list of phylo trees)
merge_species_gene_trees <- lapply(merge_species_gene_trees, function(tree) {
tree$edge.length <- NULL
return(tree)
})
col_all_tree <- c(rep('steelblue', 47),"black")
pdf("densiGeneTree_plot.pdf", width = 10, height = 7)
phangorn::densiTree(merge_species_gene_trees, col = col_all_tree, alpha = 0.7, width = 2)
merge_species_gene_trees
phangorn::densiTree(merge_species_gene_trees, col = col_all_tree, alpha = 0.7, width = 1)
# Assuming merge_species_gene_trees is initially a multiPhylo object
merge_species_gene_trees <- lapply(merge_species_gene_trees, function(tree) {
if (inherits(tree, "phylo")) {
tree$edge.length <- NULL
}
return(tree)
})
class(merge_species_gene_trees)
merge_species_gene_trees
unlist(merge_species_gene_trees)
c(unlist(merge_species_gene_trees))
plot(c(unlist(merge_species_gene_trees)))
merge_species_gene_trees <- c( locus.trees[which(names %in% unique(outliers_og_subset))], species_tree)
col_all_tree <- c(rep('steelblue', 47),"black")
pdf("densiGeneTree_plot.pdf", width = 10, height = 7)
phangorn::densiTree(merge_species_gene_trees, col = col_all_tree, alpha = 0.7, width = 1,use.edge.length = FALSE)
dev.off
phangorn::densiTree(merge_species_gene_trees, col = col_all_tree, alpha = 0.7, width = 1,use.edge.length = FALSE)
phangorn::densiTree(merge_species_gene_trees, col = col_all_tree, alpha = 0.7, width = 1,use.edge.length = FALSE, xlim = c(0, 20))
phangorn::densiTree(merge_species_gene_trees, col = col_all_tree, alpha = 0.7, width = 1,use.edge.length = FALSE, scaleX = 0.5)
phangorn::densiTree(merge_species_gene_trees, col = col_all_tree, alpha = 0.7, width = 1,use.edge.length = FALSE, scaleX = 1)
phangorn::densiTree(merge_species_gene_trees, col = col_all_tree, alpha = 0.7, width = 1,use.edge.length = FALSE)
phangorn::densiTree(merge_species_gene_trees, col = col_all_tree, alpha = 0.7, width = 1,use.edge.length = FALSE, adj = 0.5)
phangorn::densiTree(merge_species_gene_trees, col = col_all_tree, alpha = 0.7, width = 1,use.edge.length = FALSE, adj = 0.5, scale.bar = F)
phangorn::densiTree(merge_species_gene_trees, col = col_all_tree, alpha = 0.7, width = 1,use.edge.length = FALSE, adj = 0.5, scale.bar = T,scaleX = 10)
phangorn::densiTree(merge_species_gene_trees, col = col_all_tree, alpha = 0.7, width = 1,use.edge.length = FALSE, adj = 0.5, scale.bar = T,scaleX = 20)
phangorn::densiTree(merge_species_gene_trees, col = col_all_tree, alpha = 0.7, width = 1,use.edge.length = FALSE, adj = 0.5, scale.bar = T,label.offset = T)
scale.bar = F)
phangorn::densiTree(merge_species_gene_trees, col = col_all_tree, alpha = 0.7, width = 1,use.edge.length = FALSE, adj = 0.5, scale.bar = F)
pdf("densiTree_plot.pdf", width = 10, height = 7)
par(mfrow = c(1, 2))
#phangorn::densiTree(merge_species_confidence, col = c( rep('steelblue', 216),"black"), alpha = 0.7)
densiTree(merged_trees, col = c("black", rep('steelblue', 7)), alpha = 0.7, use.edge.length = F)
hist(normal_rf,xlab = "Normalized RF distance", main = NULL)
dev.off
pdf("densiTree_plot.pdf", width = 10, height = 7)
par(mfrow = c(1, 2))
#phangorn::densiTree(merge_species_confidence, col = c( rep('steelblue', 216),"black"), alpha = 0.7)
densiTree(merged_trees, col = c("black", rep('steelblue', 7)), alpha = 0.7, use.edge.length = F, width = 2)
hist(normal_rf,xlab = "Normalized RF distance", main = NULL)
dev.off
#phangorn::densiTree(merge_species_confidence, col = c( rep('steelblue', 216),"black"), alpha = 0.7)
densiTree(merged_trees, col = c("black", rep('steelblue', 7)), alpha = 0.7, use.edge.length = F, width = 2, scaleX = 1)
pdf("densiTree_plot.pdf", width = 10, height = 7)
par(mfrow = c(1, 2))
#phangorn::densiTree(merge_species_confidence, col = c( rep('steelblue', 216),"black"), alpha = 0.7)
densiTree(merged_trees, col = c("black", rep('steelblue', 7)), alpha = 0.7, use.edge.length = F, width = 2, scaleX = 1)
hist(normal_rf,xlab = "Normalized RF distance", main = NULL)
dev.off
png("densiTree_plot.png", width = 1000, height = 700, res = 150)
par(mfrow = c(1, 2))
#phangorn::densiTree(merge_species_confidence, col = c( rep('steelblue', 216),"black"), alpha = 0.7)
densiTree(merged_trees, col = c("black", rep('steelblue', 7)), alpha = 0.7, use.edge.length = F, width = 2, scaleX = 1)
hist(normal_rf,xlab = "Normalized RF distance", main = NULL)
dev.off
png("densiTree_plot.png", width = 1200, height = 700, res = 150)
par(mfrow = c(1, 2))
#phangorn::densiTree(merge_species_confidence, col = c( rep('steelblue', 216),"black"), alpha = 0.7)
densiTree(merged_trees, col = c("black", rep('steelblue', 7)), alpha = 0.7, use.edge.length = F, width = 2, scaleX = 1)
hist(normal_rf,xlab = "Normalized RF distance", main = NULL)
dev.off
png("densiTree_plot.png", width = 1400, height = 700, res = 150)
par(mfrow = c(1, 2))
#phangorn::densiTree(merge_species_confidence, col = c( rep('steelblue', 216),"black"), alpha = 0.7)
densiTree(merged_trees, col = c("black", rep('steelblue', 7)), alpha = 0.7, use.edge.length = F, width = 2, scaleX = 1)
hist(normal_rf,xlab = "Normalized RF distance", main = NULL)
dev.off
hist(normal_rf,xlab = "Normalized RF distance", main = NULL,density = T)
hist(normal_rf,xlab = "Normalized RF distance", main = NULL, freq = T)
hist(normal_rf,xlab = "Normalized RF distance", main = NULL, freq = F)
hist(normal_rf,xlab = "Normalized RF distance", main = NULL)
png("densiTree_plot.png", width = 1400, height = 700, res = 150)
par(mfrow = c(1, 2))
#phangorn::densiTree(merge_species_confidence, col = c( rep('steelblue', 216),"black"), alpha = 0.7)
hist(normal_rf,xlab = "Normalized RF distance", main = NULL)
densiTree(merged_trees, col = c("black", rep('steelblue', 7)), alpha = 0.7, use.edge.length = F, width = 2, scaleX = 1)
dev.off
png("densiTree_plot.png", width = 1400, height = 700, res = 150)
par(mfrow = c(1, 2))
#phangorn::densiTree(merge_species_confidence, col = c( rep('steelblue', 216),"black"), alpha = 0.7)
hist(normal_rf,xlab = "Normalized RF distance", main = NULL)
densiTree(merged_trees, col = c("black", rep('steelblue', 7)), alpha = 0.7, use.edge.length = F, width = 2)
dev.off
png("densiTree_plot.png", width = 1400, height = 700, res = 150)
par(mfrow = c(1, 2))
#phangorn::densiTree(merge_species_confidence, col = c( rep('steelblue', 216),"black"), alpha = 0.7)
hist(normal_rf,xlab = "Normalized RF distance", main = NULL)
densiTree(merged_trees, col = c("black", rep('steelblue', 7)), alpha = 0.7, use.edge.length = F, width = 2,scaleX = 1)
dev.off
